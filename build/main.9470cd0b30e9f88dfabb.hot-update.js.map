{"version":3,"sources":["webpack:///./module/appTemplate/appTemplate.js","webpack:///webpack/runtime/getFullHash"],"names":["appTemplate","selector","app","document","querySelector","template","loader","lds","body","append","insertAdjacentHTML","modalTemplates","getList","classList","add","userList","events","getData","res","resEvents","status","json","data","console","log","forEach","obj","parsedData","JSON","parse","item","id","push","Error","warn","remove","showGrid","userAuth"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEe,SAASA,WAAT,CAAqBC,QAArB,EAA+B;AAC5C,MAAMC,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuBH,QAAvB,CAAZ;AACA,MAAMI,QAAQ,gaAAd;AAUA,MAAMC,MAAM,GAAGC,gDAAG,EAAlB;AACAJ,UAAQ,CAACK,IAAT,CAAcC,MAAd,CAAqBH,MAArB;AACAJ,KAAG,CAACQ,kBAAJ,CAAuB,WAAvB,EAAoCL,QAApC;AACAM,0DAAc;AACdC,SAAO,CAACN,MAAD,EAASJ,GAAT,CAAP;AACD;;SAEcU,O;;;;;qEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAuBN,kBAAvB,2DAAgC,IAAhC;AAAsCJ,eAAtC;;AACE,gBAAII,MAAJ,EAAY;AAAEA,oBAAM,CAACO,SAAP,CAAiBC,GAAjB,CAAqB,QAArB;AAAiC;;AACzCC,oBAFR,GAEmB,EAFnB;AAGQC,kBAHR,GAGiB,EAHjB;AAAA;AAAA;AAAA,mBAKsBC,8DAAO,CAAC,OAAD,CAL7B;;AAAA;AAKUC,eALV;AAAA;AAAA,mBAM4BD,8DAAO,CAAC,QAAD,CANnC;;AAAA;AAMUE,qBANV;;AAAA,kBAOQD,GAAG,CAACE,MAAJ,KAAe,GAPvB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAQyBF,GAAG,CAACG,IAAJ,EARzB;;AAAA;AAQYC,gBARZ;AASMC,mBAAO,CAACC,GAAR,CAAYF,IAAZ;AACAA,gBAAI,CAACG,OAAL,CAAa,UAAAC,GAAG,EAAI;AAClB,kBAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAG,CAACJ,IAAf,CAAnB;;AACA,kBAAMQ,IAAI;AAAKC,kBAAE,EAAEL,GAAG,CAACK;AAAb,iBAAoBJ,UAApB,CAAV;;AACAZ,sBAAQ,CAACiB,IAAT,CAAcF,IAAd;AACD,aAJD;AAVN;AAAA;;AAAA;AAAA,kBAemB,IAAIG,KAAJ,CAAU,wBAAV,CAfnB;;AAAA;AAAA,kBAgBQd,SAAS,CAACC,MAAV,KAAqB,GAhB7B;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAiByBD,SAAS,CAACE,IAAV,EAjBzB;;AAAA;AAiBYC,iBAjBZ;;AAkBM,gBAAIA,KAAJ,EAAU;AACRA,mBAAI,CAACG,OAAL,CAAa,UAAAC,GAAG,EAAI;AAClB,oBAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAG,CAACJ,IAAf,CAAnB;;AACA,oBAAMQ,IAAI;AAAKC,oBAAE,EAAEL,GAAG,CAACK;AAAb,mBAAoBJ,UAApB,CAAV;;AACAX,sBAAM,CAACgB,IAAP,CAAYF,IAAZ;AACD,eAJD;AAKD;;AAxBP;AAAA;;AAAA;AAAA,kBAyBmB,IAAIG,KAAJ,CAAU,wBAAV,CAzBnB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA2BIV,mBAAO,CAACW,IAAR;;AA3BJ;AAAA;;AA6BI,gBAAI5B,MAAJ,EAAY;AAAEA,oBAAM,CAACO,SAAP,CAAiBsB,MAAjB,CAAwB,QAAxB;AAAoC;;AAClDjC,eAAG,CAACW,SAAJ,CAAcC,GAAd,CAAkB,QAAlB;AACAsB,8DAAQ;AACRC,2DAAQ,CAAC,OAAD,EAAUtB,QAAV,EAAoBC,MAApB,CAAR;AAhCJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;;;;;;;;;WC1BA,oCAAoC,+BAA+B,E","file":"main.9470cd0b30e9f88dfabb.hot-update.js","sourcesContent":["/* eslint-disable no-unused-vars */\r\nimport showGrid from '../showGrid';\r\nimport modalTemplates from './modalTemplates';\r\nimport userAuth from '../login';\r\nimport lds from './loader';\r\nimport { getData } from '../apiUtils.js/apiUtils';\r\n\r\nexport default function appTemplate(selector) {\r\n  const app = document.querySelector(selector);\r\n  const template = ` <div class=\"controls\">\r\n            <h2 class=\"title\">Calendar</h2>\r\n            <div id=\"filter\"></div>\r\n            <button class=\"btn js-modal-open\" data-type=\"add-event\" data-modal=\"modal-event\">\r\n                <span>New event</span>\r\n                <span class=\"fas fa-plus\"></span>\r\n            </button>            \r\n        </div>\r\n        <div class=\"calendar-grid\">\r\n        </div>`;\r\n  const loader = lds();\r\n  document.body.append(loader);\r\n  app.insertAdjacentHTML('beforeend', template);\r\n  modalTemplates();\r\n  getList(loader, app);\r\n}\r\n\r\nasync function getList(loader = null, app) {\r\n  if (loader) { loader.classList.add('active'); }\r\n  const userList = [];\r\n  const events = [];\r\n  try {\r\n    const res = await getData('users');\r\n    const resEvents = await getData('events');\r\n    if (res.status === 200) {\r\n      const data = await res.json();\r\n      console.log(data);\r\n      data.forEach(obj => {\r\n        const parsedData = JSON.parse(obj.data);\r\n        const item = { id: obj.id, ...parsedData };\r\n        userList.push(item);\r\n      });\r\n    } else { throw new Error('Network status not 200'); }\r\n    if (resEvents.status === 200) {\r\n      const data = await resEvents.json();\r\n      if (data) {\r\n        data.forEach(obj => {\r\n          const parsedData = JSON.parse(obj.data);\r\n          const item = { id: obj.id, ...parsedData };\r\n          events.push(item);\r\n        });\r\n      }\r\n    } else { throw new Error('Network status not 200'); }\r\n  } catch (err) {\r\n    console.warn(err);\r\n  } finally {\r\n    if (loader) { loader.classList.remove('active'); }\r\n    app.classList.add('active');\r\n    showGrid();\r\n    userAuth('login', userList, events);\r\n  }\r\n}\r\n","__webpack_require__.h = function() { return \"2e85a98b5b626d1b23c0\"; }"],"sourceRoot":""}