{"version":3,"sources":["webpack:///./module/DataLayer/DataLayer.js","webpack:///webpack/runtime/getFullHash"],"names":["conf","url","system","usersEntity","eventsEntity","DataLayer","exsists","instance","resStatus","users","events","init","getData","entity","res","status","Error","json","usersData","getDataFromJSON","console","warn","log","data","list","forEach","obj","item","id","JSON","parse","push"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA,IAAMA,IAAI,GAAG;AACXC,KAAG,EAAE,qCADM;AAEXC,QAAM,EAAE,iBAFG;AAGXC,aAAW,EAAE,OAHF;AAIXC,cAAY,EAAE;AAJH,CAAb;;IAOqBC,S;AACnB,uBAAc;AAAA;;AACZ,QAAIA,SAAS,CAACC,OAAd,EAAuB;AACrB,aAAOD,SAAS,CAACE,QAAjB;AACD;;AACDF,aAAS,CAACE,QAAV,GAAqB,IAArB;AACAF,aAAS,CAACC,OAAV,GAAoB,IAApB;AACA,SAAKL,GAAL,GAAWD,IAAI,CAACC,GAAhB;AACA,SAAKC,MAAL,GAAcF,IAAI,CAACE,MAAnB;AACA,SAAKC,WAAL,GAAmBH,IAAI,CAACG,WAAxB;AACA,SAAKC,YAAL,GAAoBJ,IAAI,CAACI,YAAzB;AACA,SAAKI,SAAL,GAAiB,IAAjB;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,MAAL,GAAc,EAAd;AAEA,SAAKC,IAAL;AACD;;;;WAED,gBAAO;AACL,WAAKC,OAAL,CAAa,KAAKT,WAAlB;AACA,WAAKS,OAAL,CAAa,KAAKR,YAAlB;AACD;;;;8EAED,iBAAcS,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEsBD,mDAAO,CAACC,MAAD,CAF7B;;AAAA;AAEUC,mBAFV;;AAAA,sBAGQA,GAAG,CAACC,MAAJ,KAAe,GAHvB;AAAA;AAAA;AAAA;;AAAA,sBAGoC,IAAIC,KAAJ,kBAAoBH,MAApB,iBAHpC;;AAAA;AAAA;AAAA,uBAI4BC,GAAG,CAACG,IAAJ,EAJ5B;;AAAA;AAIUC,yBAJV;AAKIC,+BAAe,CAACD,SAAD,EAAY,KAAKL,MAAL,CAAZ,CAAf;AALJ;AAAA;;AAAA;AAAA;AAAA;AAOIO,uBAAO,CAACC,IAAR;;AAPJ;AAAA;AASID,uBAAO,CAACE,GAAR,WAAeT,MAAf,SAA2B,KAAKA,MAAL,CAA3B;AATJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;KAYA;;;;;AAEF,SAASM,eAAT,CAAyBI,IAAzB,EAA+BC,IAA/B,EAAqC;AACnCD,MAAI,CAACE,OAAL,CAAa,UAAAC,GAAG,EAAI;AAClB,QAAMC,IAAI;AAAKC,QAAE,EAAEF,GAAG,CAACE;AAAb,OAAoBC,IAAI,CAACC,KAAL,CAAWJ,GAAG,CAACH,IAAf,CAApB,CAAV;;AACAC,QAAI,CAACO,IAAL,CAAUJ,IAAV;AACD,GAHD;AAID,C,CAED;AAEA;AAEA,kC;;;;;;;;;;WCzDA,oCAAoC,+BAA+B,E","file":"main.778633aeafb04daf426c.hot-update.js","sourcesContent":["import { getData } from './dataUtils';\r\n\r\nconst conf = {\r\n  url: 'http://158.101.166.74:8080/api/data',\r\n  system: 'illia_cherkasov',\r\n  usersEntity: 'users',\r\n  eventsEntity: 'events',\r\n};\r\n\r\nexport default class DataLayer {\r\n  constructor() {\r\n    if (DataLayer.exsists) {\r\n      return DataLayer.instance;\r\n    }\r\n    DataLayer.instance = this;\r\n    DataLayer.exsists = true;\r\n    this.url = conf.url;\r\n    this.system = conf.system;\r\n    this.usersEntity = conf.usersEntity;\r\n    this.eventsEntity = conf.eventsEntity;\r\n    this.resStatus = null;\r\n    this.users = [];\r\n    this.events = [];\r\n\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.getData(this.usersEntity);\r\n    this.getData(this.eventsEntity);\r\n  }\r\n\r\n  async getData(entity) {\r\n    try {\r\n      const res = await getData(entity);\r\n      if (res.status !== 200) { throw new Error(`Entity ${entity} not exists`); }\r\n      const usersData = await res.json();\r\n      getDataFromJSON(usersData, this[entity]);\r\n    } catch (err) {\r\n      console.warn(err);\r\n    } finally {\r\n      console.log(`${entity}: `, this[entity]);\r\n    }\r\n  }\r\n} // end class\r\n\r\nfunction getDataFromJSON(data, list) {\r\n  data.forEach(obj => {\r\n    const item = { id: obj.id, ...JSON.parse(obj.data) };\r\n    list.push(item);\r\n  });\r\n}\r\n\r\n// const data = new DataLayer(conf.url, conf.system, conf.entities);\r\n\r\n// console.log(data);\r\n\r\n// data.getData(conf.entities[0]);\r\n","__webpack_require__.h = function() { return \"a0d28144961366cdd931\"; }"],"sourceRoot":""}